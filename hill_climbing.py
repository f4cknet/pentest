from pycipher import SimpleSubstitution
from math import log10
import random
import string


# calculate default ngram using prepared text
class ngram(object):
    def __init__(self, datafile):
        self.default_ngrams = {}
        for line in open(datafile):
            key, count = line.split()
            self.default_ngrams[key] = int(count)
        self.key_length = len(key)
        self.key_sum = sum(self.default_ngrams.values())
        for key in self.default_ngrams.keys():
            self.default_ngrams[key] = log10(float(self.default_ngrams[key])/self.key_sum)
        self.floor = log10(0.0001/self.key_sum)    
        
        
    def calculate_score(self, text):
        score = 0
        for i in range(len(text)-self.key_length+1):
            if text[i:i+self.key_length] in self.default_ngrams:
                score += self.default_ngrams[text[i:i+self.key_length]]
            else:
                score += self.floor
        return score


# hill climbing and simulated annealing
def hill_climbing(cipher):
    text_ngram = ngram("quadgrams.txt")
    cipher = cipher.lower()
    testkey = list(string.ascii_lowercase)
    finalscore = float("-inf")
    finalkey = ""

    times = 0
    cnt = 0
    cnt_end = 100
    upper = 10
    record = {}

    while True:
        if cnt > cnt_end:
            return None
        cnt += 1
        if times in record:
            record[times] += 1
        else:
            record[times] = 1
        if record[times] > upper:
            return (finalscore, finalkey, SimpleSubstitution(finalkey).decipher(cipher))
        random.shuffle(testkey)
        testplain = SimpleSubstitution(testkey).decipher(cipher)
        testscore = text_ngram.calculate_score(testplain)
        count_end = 1000
        count = 0
        while count < count_end:
            a, b = random.randint(0, 25), random.randint(0, 25)
            tmpkey = testkey[:]
            tmpkey[a], tmpkey[b] = tmpkey[b], tmpkey[a]
            tmpplain = SimpleSubstitution(tmpkey).decipher(cipher)
            tmpscore = text_ngram.calculate_score(tmpplain)
            if tmpscore > testscore:
                testscore = tmpscore
                testkey = tmpkey[:]
                count = 0
            count += 1
        if testscore > finalscore:
            finalscore, finalkey = testscore, testkey[:]
            times += 1
        print ("Test {} finished.".format(cnt))


cipher = "EMGLOSUDCGDNCUSWYSFHNSFCYKDPUMLWGYICOXYSIPJCKQPKUGKMGOLICGINCGACKSNISACYKZSCKXECJCKSHYSXCGOIDPKZCNKSHICGIWYGKKGKGOLDSILKGOIUSIGLEDSPWZUGFZCCNDGYYSFUSZCNXEOJNCGYEOWEUPXEZGACGNFGLKNSACIGOIYCKXCJUCIUZCFZCCNDGYYSFEUEKUZCSOCFZCCNC"
result = hill_climbing(cipher)
if result:
    print ("------------------------")
    print ("Best score: {}".format(result[0]))
    print ("Best key found: {}".format(result[1]))
    print ("Plaintext is: {}".format(result[2]))
else:
    print ("ERROR")